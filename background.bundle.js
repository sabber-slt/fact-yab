(()=>{var t={743:(t,e,r)=>{"use strict";var n=r(780),o=r.n(n);const i={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let a;const c=new Uint8Array(16);function s(){if(!a&&(a="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!a))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return a(c)}const u=[];for(let t=0;t<256;++t)u.push((t+256).toString(16).slice(1));const l=function(t,e,r){if(i.randomUUID&&!e&&!t)return i.randomUUID();const n=(t=t||{}).random||(t.rng||s)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){r=r||0;for(let t=0;t<16;++t)e[r+t]=n[t];return e}return function(t,e=0){return(u[t[e+0]]+u[t[e+1]]+u[t[e+2]]+u[t[e+3]]+"-"+u[t[e+4]]+u[t[e+5]]+"-"+u[t[e+6]]+u[t[e+7]]+"-"+u[t[e+8]]+u[t[e+9]]+"-"+u[t[e+10]]+u[t[e+11]]+u[t[e+12]]+u[t[e+13]]+u[t[e+14]]+u[t[e+15]]).toLowerCase()}(n)},f=[239,187,191];const h="accessToken";let d="Is the following statement true, false, or uncertain? answer in persian",p="";chrome.storage.sync.get(["prompt","apiKey"],(function(t){t&&t.prompt&&(d=t.prompt),t&&t.apiKey&&(p=t.apiKey)}));const y=new(o())(1e4);async function g(){if(y.get(h))return y.get(h);const t=await fetch("https://chat.openai.com/api/auth/session").then((t=>t.json())).catch((()=>({})));if(!t.accessToken)throw new Error("Error");return y.set(h,t.accessToken),t.accessToken}async function v(){const t=await g(),e=await fetch("https://chat.openai.com/backend-api/conversations?offset=0&limit=1",{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}}).then((t=>t.json())).catch((()=>({})));return 1===e?.items?.length?e.items[0].id:""}async function m(t){const e=await g(),r=await fetch(`https://chat.openai.com/backend-api/conversation/${t}`,{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({is_visible:!1})}).then((t=>t.json())).catch((()=>({})));return!!r?.success}async function w(t,e){const r=await g(),n={action:"next",messages:[{id:l(),author:{role:"user"},role:"user",content:{content_type:"text",parts:[t]}}],model:"text-davinci-002-render",parent_message_id:l()};await async function(t,e){const{onMessage:r,onError:n,...o}=e,i=await fetch(t,o).catch((t=>n(t))),a=function(t){let e,r,n,o,i,a,c;return s(),{feed:function(t){r=r?r+t:t,e&&function(t){return f.every(((e,r)=>t.charCodeAt(r)===e))}(r)&&(r=r.slice(f.length)),e=!1;const i=r.length;let a=0,c=!1;for(;a<i;){c&&("\n"===r[a]&&++a,c=!1);let t,e=-1,s=o;for(let o=n;e<0&&o<i;++o)t=r[o],":"===t&&s<0?s=o-a:"\r"===t?(c=!0,e=o-a):"\n"===t&&(e=o-a);if(e<0){n=i-a,o=s;break}n=0,o=-1,u(r,a,s,e),a+=e+1}a===i?r="":a>0&&(r=r.slice(a))},reset:s};function s(){e=!0,r="",n=0,o=-1,i=void 0,a=void 0,c=""}function u(e,r,n,o){if(0===o)return c.length>0&&(t({type:"event",id:i,event:a||void 0,data:c.slice(0,-1)}),c="",i=void 0),void(a=void 0);const s=n<0,u=e.slice(r,r+(s?o:n));let l=0;l=s?o:" "===e[r+n+1]?n+2:n+1;const f=r+l,h=o-l,d=e.slice(f,f+h).toString();if("data"===u)c+=d?"".concat(d,"\n"):"\n";else if("event"===u)a=d;else if("id"!==u||d.includes("\0")){if("retry"===u){const e=parseInt(d,10);Number.isNaN(e)||t({type:"reconnect-interval",value:e})}}else i=d}}((t=>{"event"===t.type&&r(t.data)}));for await(const t of async function*(t){const e=t.getReader();try{for(;;){const{done:t,value:r}=await e.read();if(t)return;yield r}}finally{e.releaseLock()}}(i.body)){const e=(new TextDecoder).decode(t);a.feed(e)}}("https://chat.openai.com/backend-api/conversation",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(n),onMessage(t){if("[DONE]"!==t)try{const r=JSON.parse(t),n=r.message?.content?.parts?.[0];n&&e(n)}catch(e){console.log("sse message",t),console.log(`Error in onMessage: ${e}`)}},onError(t){console.log(`Error in fetchSSE: ${t}`)}})}let b={};function x(t){let e="";for(const r of t)e+=(e?" ":"")+r;return e}chrome.action.onClicked.addListener((function(t){const e=t.id;b[e]||(b[e]=!0,setTimeout((()=>delete b[e]),1e4),chrome.action.setBadgeBackgroundColor({color:[242,38,19,230]}),chrome.action.setBadgeText({text:"fact"}),chrome.scripting.executeScript({target:{tabId:e},files:["content.bundle.js"]}),setTimeout((function(){chrome.action.setBadgeText({text:""})}),1e3))})),chrome.runtime.onConnect.addListener((t=>{t.onMessage.addListener((async(e,r,n)=>{console.debug("received msg ",e.content);try{const r=3e3,n=function(t,e){const r=[],n=t.split(/\s+/);let o="";for(const t of n)o.length+t.length+1<=e?o+=(o?" ":"")+t:(r.push(o),o=t);return o&&r.push(o),r}(e.content,r);let o="";for(const e of n){const r=d+`\n\n${e}`;let n="";await w(r,(e=>{n=e,t.postMessage({answer:x([o,e])})})),await m(await v()),o=x([o,n])+"\n\n"}}catch(e){console.error(e),t.postMessage({error:e.message}),y.delete(h)}}))}))},780:(t,e,r)=>{"use strict";const n=r(918);class o{constructor(t,e){if(this.maxAge=t,this[Symbol.toStringTag]="Map",this.data=new Map,n(this.data),e)for(const[t,r]of e)this.set(t,r)}get size(){return this.data.size}clear(){this.data.clear()}delete(t){return this.data.delete(t)}has(t){return this.data.has(t)}get(t){const e=this.data.get(t);if(e)return e.data}set(t,e){return this.data.set(t,{maxAge:Date.now()+this.maxAge,data:e}),this}values(){return this.createIterator((t=>t[1].data))}keys(){return this.data.keys()}entries(){return this.createIterator((t=>[t[0],t[1].data]))}forEach(t,e){for(const[r,n]of this.entries())t.apply(e,[n,r,this])}[Symbol.iterator](){return this.entries()}*createIterator(t){for(const e of this.data.entries())yield t(e)}}t.exports=o},918:(t,e,r)=>{"use strict";const n=r(931);t.exports=function(t,e="maxAge"){let r,o,i;const a=async()=>{if(void 0!==r)return;const a=async a=>{i=n();const c=a[1][e]-Date.now();return c<=0?(t.delete(a[0]),void i.resolve()):(r=a[0],o=setTimeout((()=>{t.delete(a[0]),i&&i.resolve()}),c),"function"==typeof o.unref&&o.unref(),i.promise)};try{for(const e of t)await a(e)}catch(t){}r=void 0},c=t.set.bind(t);return t.set=(e,n)=>{t.has(e)&&t.delete(e);const s=c(e,n);return r&&r===e&&(r=void 0,void 0!==o&&(clearTimeout(o),o=void 0),void 0!==i&&(i.reject(void 0),i=void 0)),a(),s},a(),t}},931:t=>{"use strict";t.exports=()=>{const t={};return t.promise=new Promise(((e,r)=>{t.resolve=e,t.reject=r})),t}},666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var i=e&&e.prototype instanceof v?e:v,a=Object.create(i.prototype),c=new N(n||[]);return o(a,"_invoke",{value:O(t,r,c)}),a}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var h="suspendedStart",d="suspendedYield",p="executing",y="completed",g={};function v(){}function m(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(I([])));E&&E!==r&&n.call(E,a)&&(b=E);var L=w.prototype=v.prototype=Object.create(b);function j(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function T(t,e){function r(o,i,a,c){var s=f(t[o],t,i);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return r("throw",t,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}})}function O(t,e,r){var n=h;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return A()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=k(a,r);if(c){if(c===g)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var s=f(t,e,r);if("normal"===s.type){if(n=r.done?y:d,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=y,r.method="throw",r.arg=s.arg)}}}function k(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,k(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;var i=f(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,g;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,g):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function I(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:A}}function A(){return{value:e,done:!0}}return m.prototype=w,o(L,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:m,configurable:!0}),m.displayName=u(w,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,s,"GeneratorFunction")),t.prototype=Object.create(L),t},t.awrap=function(t){return{__await:t}},j(T.prototype),u(T.prototype,c,(function(){return this})),t.AsyncIterator=T,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new T(l(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},j(L),u(L,s,"Generator"),u(L,a,(function(){return this})),u(L,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=I,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(S),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),S(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;S(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:I(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),g}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r(666),r(743)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,